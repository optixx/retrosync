name: Build and Release Executables

on:
  workflow_dispatch:  # This allows the workflow to be triggered manually

jobs:

  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update Version
        id: bump_version
        run: |
          current_version=$(cat VERSION)
          IFS='.' read -r major minor patch <<< "$current_version"
          patch=$((patch + 1))
          new_version="$major.$minor.$patch"
          echo "$new_version" > VERSION
          echo "::set-output name=new_version::$new_version"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          body: |
            This release includes the following binaries:
            - Windows executable
            - macOS executable
            - Linux executable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided by GitHub

      - name: Commit Version Update
        run: |
          git config --local user.email "david@optixx.org"
          git config --local user.name "David Voswinkel"
          git add VERSION
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push

  build-windows:
    runs-on: windows-latest
    needs: [create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: pyinstaller --onefile retrosync.py

      - name: Get Version
        id: get_version
        shell: powershell
        run: |
          $content = Get-Content VERSION -Raw
          echo "::set-output name=file_content::$content"

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-executable
          path: ./dist/retrosync.exe

      - name: Upload Windows executable
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.file_content }}
          files: ./dist/retrosync.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    runs-on: macos-latest
    needs: [create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: pyinstaller --onefile retrosync.py

      - name: Get Version
        id: get_version
        run: |
          current_version=$(cat VERSION)
          echo "::set-output name=current_version::$current_version"

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-executable
          path: ./dist/retrosync

      - name: Upload macOS executable
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.current_version }}
          files: ./dist/retrosync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build-linux:
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable
        run: pyinstaller --onefile retrosync.py

      - name: Get Version
        id: get_version
        run: |
          current_version=$(cat VERSION)
          echo "::set-output name=current_version::$current_version"

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-executable
          path: ./dist/retrosync

      - name: Upload Linux executable
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.current_version }}
          files: ./dist/retrosync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # create-release:
  #   runs-on: ubuntu-latest
  #   needs: [build-windows, build-macos, build-linux]  # Wait for the build jobs to finish
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #
  #     - name: Update Version
  #       id: bump_version
  #       run: |
  #         current_version=$(cat VERSION)
  #         IFS='.' read -r major minor patch <<< "$current_version"
  #         patch=$((patch + 1))
  #         new_version="$major.$minor.$patch"
  #         echo "$new_version" > VERSION
  #         echo "::set-output name=new_version::$new_version"
  #
  #     - name: Create Release
  #       id: create_release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ steps.bump_version.outputs.new_version }}
  #         release_name: Release ${{ steps.bump_version.outputs.new_version }}
  #         body: |
  #           This release includes the following binaries:
  #           - Windows executable
  #           - macOS executable
  #           - Linux executable
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided by GitHub
  #
  #     - name: Upload Windows executable
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ steps.bump_version.outputs.new_version }}
  #         files: ./dist/retrosync.exe
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: Upload macOS executable
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ steps.bump_version.outputs.new_version }}
  #         files: ./dist/retrosync
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: Upload Linux executable
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ steps.bump_version.outputs.new_version }}
  #         files: ./dist/retrosync
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: Commit Version Update
  #       run: |
  #         git config --local user.email "david@optixx.org"
  #         git config --local user.name "David Voswinkel"
  #         git add VERSION
  #         git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
  #         git push
